"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Connect =
/*#__PURE__*/
function () {
  function Connect(connection, clientId, clientSecret) {
    _classCallCheck(this, Connect);

    this.connection = connection;
    this.clientId = clientId;
    this.clientSecret = clientSecret;
  }

  _createClass(Connect, [{
    key: "authorize",
    value: function authorize() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // https://docs.nylas.com/reference#connectauthorize
      if (!this.clientId) {
        throw new Error('connect.authorize() cannot be called until you provide a clientId via Nylas.config()');
      }

      return this.connection.request({
        method: 'POST',
        path: '/connect/authorize',
        body: {
          client_id: this.clientId,
          name: options.name,
          email_address: options.email_address,
          provider: options.provider,
          settings: options.settings,
          scopes: options.scopes
        }
      });
    }
  }, {
    key: "token",
    value: function token(code) {
      // https://docs.nylas.com/reference#connecttoken
      if (!this.clientId) {
        throw new Error('connect.token() cannot be called until you provide a clientId via Nylas.config()');
      }

      if (!this.clientSecret) {
        throw new Error('connect.token() cannot be called until you provide a clientSecret via Nylas.config()');
      }

      return this.connection.request({
        method: 'POST',
        path: '/connect/token',
        body: {
          client_id: this.clientId,
          client_secret: this.clientSecret,
          code: code
        }
      });
    }
  }, {
    key: "newAccount",
    value: function newAccount() {// this.authorize() -> this.token()
    }
  }]);

  return Connect;
}();

exports["default"] = Connect;