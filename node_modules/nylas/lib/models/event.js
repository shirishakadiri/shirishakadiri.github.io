"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _restfulModel = _interopRequireDefault(require("./restful-model"));

var _attributes = _interopRequireDefault(require("./attributes"));

var _eventParticipant = _interopRequireDefault(require("./event-participant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Event =
/*#__PURE__*/
function (_RestfulModel) {
  _inherits(Event, _RestfulModel);

  function Event() {
    _classCallCheck(this, Event);

    return _possibleConstructorReturn(this, _getPrototypeOf(Event).apply(this, arguments));
  }

  _createClass(Event, [{
    key: "deleteRequestQueryString",
    value: function deleteRequestQueryString(params) {
      var qs = {};

      if (params.hasOwnProperty('notify_participants')) {
        qs.notify_participants = params.notify_participants;
      }

      return qs;
    }
  }, {
    key: "save",
    value: function save() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this._save(params, callback);
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(Event.prototype), "fromJSON", this).call(this, json);

      if (this.when) {
        delete this.when.object;
      }

      return this;
    }
  }, {
    key: "rsvp",
    value: function rsvp(status, comment, callback) {
      var _this = this;

      return this.connection.request({
        method: 'POST',
        body: {
          event_id: this.id,
          status: status,
          comment: comment
        },
        path: '/send-rsvp'
      }).then(function (json) {
        _this.fromJSON(json);

        if (callback) {
          callback(null, _this);
        }

        return Promise.resolve(_this);
      })["catch"](function (err) {
        if (callback) {
          callback(err);
        }

        return Promise.reject(err);
      });
    }
  }, {
    key: "start",
    get: function get() {
      var start = this.when.start_time || this.when.start_date || this.when.time || this.when.date;
      return start;
    },
    set: function set(val) {
      if (this.when) {
        if (typeof val === 'number') {
          if (val === this.when.end_time) {
            this.when = {
              time: val
            };
          } else {
            delete this.when.time;
            delete this.when.start_date;
            delete this.when.date;
            this.when.start_time = val;
          }
        }

        if (typeof val === 'string') {
          if (val === this.when.end_date) {
            this.when = {
              date: val
            };
          } else {
            delete this.when.date;
            delete this.when.start_time;
            delete this.when.time;
            this.when.start_date = val;
          }
        }
      }
    }
  }, {
    key: "end",
    get: function get() {
      var end = this.when.end_time || this.when.end_date || this.when.time || this.when.date;
      return end;
    },
    set: function set(val) {
      if (this.when) {
        if (typeof val === 'number') {
          if (val === this.when.start_time) {
            this.when = {
              time: val
            };
          } else {
            delete this.when.time;
            delete this.when.end_date;
            delete this.when.date;
            this.when.end_time = val;
          }
        }

        if (typeof val === 'string') {
          if (val === this.when.start_date) {
            this.when = {
              date: val
            };
          } else {
            delete this.when.date;
            delete this.when.time;
            delete this.when.end_time;
            this.when.end_date = val;
          }
        }
      }
    }
  }]);

  return Event;
}(_restfulModel["default"]);

exports["default"] = Event;
Event.collectionName = 'events';
Event.attributes = _objectSpread({}, _restfulModel["default"].attributes, {
  calendarId: _attributes["default"].String({
    modelKey: 'calendarId',
    jsonKey: 'calendar_id'
  }),
  iCalUID: _attributes["default"].String({
    modelKey: 'iCalUID',
    jsonKey: 'ical_uid'
  }),
  messageId: _attributes["default"].String({
    modelKey: 'messageId',
    jsonKey: 'message_id'
  }),
  title: _attributes["default"].String({
    modelKey: 'title'
  }),
  description: _attributes["default"].String({
    modelKey: 'description'
  }),
  owner: _attributes["default"].String({
    modelKey: 'owner'
  }),
  participants: _attributes["default"].Collection({
    modelKey: 'participants',
    itemClass: _eventParticipant["default"]
  }),
  readOnly: _attributes["default"].Boolean({
    modelKey: 'readOnly',
    jsonKey: 'read_only'
  }),
  location: _attributes["default"].String({
    modelKey: 'location'
  }),
  when: _attributes["default"].Object({
    modelKey: 'when'
  }),
  busy: _attributes["default"].Boolean({
    modelKey: 'busy'
  }),
  status: _attributes["default"].String({
    modelKey: 'status'
  })
});