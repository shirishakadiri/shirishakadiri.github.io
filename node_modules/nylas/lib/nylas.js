"use strict";

var _request = _interopRequireDefault(require("request"));

var _nylasConnection = _interopRequireDefault(require("./nylas-connection"));

var _managementAccount = _interopRequireDefault(require("./models/management-account"));

var _account = _interopRequireDefault(require("./models/account"));

var _connect = _interopRequireDefault(require("./models/connect"));

var _restfulModelCollection = _interopRequireDefault(require("./models/restful-model-collection"));

var _managementModelCollection = _interopRequireDefault(require("./models/management-model-collection"));

var _webhook = _interopRequireDefault(require("./models/webhook"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Nylas =
/*#__PURE__*/
function () {
  function Nylas() {
    _classCallCheck(this, Nylas);

    this.clientId = null;
    this.clientSecret = null;
  }

  _createClass(Nylas, null, [{
    key: "config",
    value: function config(_ref) {
      var clientId = _ref.clientId,
          clientSecret = _ref.clientSecret,
          apiServer = _ref.apiServer,
          deprecatingParams = _objectWithoutProperties(_ref, ["clientId", "clientSecret", "apiServer"]);

      if (apiServer && apiServer.indexOf('://') === -1) {
        throw new Error('Please specify a fully qualified URL for the API Server.');
      }

      var appId;
      var appSecret;

      for (var key in deprecatingParams) {
        if (key === 'appId') {
          appId = deprecatingParams[key];
        } else if (key === 'appSecret') {
          appSecret = deprecatingParams[key];
        }
      }

      if (appId) {
        this.clientId = appId;
        process.emitWarning('"appId" will be deprecated in version 5.0.0. Use "clientId" instead.', {
          code: 'Nylas',
          type: 'DeprecationWarning'
        });
      }

      if (appSecret) {
        this.clientSecret = appSecret;
        process.emitWarning('"appSecret" will be deprecated in version 5.0.0. Use "clientSecret" instead.', {
          code: 'Nylas',
          type: 'DeprecationWarning'
        });
      }

      if (clientId) {
        this.clientId = clientId;
      }

      if (clientSecret) {
        this.clientSecret = clientSecret;
      }

      if (apiServer) {
        this.apiServer = apiServer;
      }

      var conn = new _nylasConnection["default"](this.clientSecret, {
        clientId: this.clientId
      });
      this.connect = new _connect["default"](conn, this.clientId, this.clientSecret);
      this.webhooks = new _managementModelCollection["default"](_webhook["default"], conn, this.clientId);

      if (this.clientCredentials()) {
        this.accounts = new _managementModelCollection["default"](_managementAccount["default"], conn, this.clientId);
      } else {
        this.accounts = new _restfulModelCollection["default"](_account["default"], conn, this.clientId);
      }

      return this;
    }
  }, {
    key: "clientCredentials",
    value: function clientCredentials() {
      return this.clientId != null && this.clientSecret != null;
    }
  }, {
    key: "with",
    value: function _with(accessToken) {
      if (!accessToken) {
        throw new Error('This function requires an access token');
      }

      return new _nylasConnection["default"](accessToken, {
        clientId: this.clientId
      });
    }
  }, {
    key: "exchangeCodeForToken",
    value: function exchangeCodeForToken(code, callback) {
      var _this = this;

      if (!this.clientId || !this.clientSecret) {
        throw new Error('exchangeCodeForToken() cannot be called until you provide a clientId and secret via config()');
      }

      if (!code) {
        throw new Error('exchangeCodeForToken() must be called with a code');
      }

      return new Promise(function (resolve, reject) {
        var options = {
          method: 'GET',
          json: true,
          url: "".concat(_this.apiServer, "/oauth/token"),
          qs: {
            client_id: _this.clientId,
            client_secret: _this.clientSecret,
            grant_type: 'authorization_code',
            code: code
          }
        };
        return (0, _request["default"])(options, function (error, response, body) {
          if (error) {
            reject(error);

            if (callback) {
              return callback(error);
            }
          } else {
            resolve(body['access_token']);

            if (callback) {
              return callback(null, body['access_token']);
            }
          }
        });
      });
    }
  }, {
    key: "urlForAuthentication",
    value: function urlForAuthentication() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (!this.clientId) {
        throw new Error('urlForAuthentication() cannot be called until you provide a clientId via config()');
      }

      if (!options.redirectURI) {
        throw new Error('urlForAuthentication() requires options.redirectURI');
      }

      if (!options.loginHint) {
        options.loginHint = '';
      }

      var url = "".concat(this.apiServer, "/oauth/authorize?client_id=").concat(this.clientId, "&response_type=code&login_hint=").concat(options.loginHint, "&redirect_uri=").concat(options.redirectURI);

      if (options.state != null) {
        url += "&state=".concat(options.state);
      }

      if (options.scopes != null) {
        url += "&scopes=".concat(options.scopes.join(','));
      }

      return url;
    }
  }, {
    key: "appId",
    get: function get() {
      process.emitWarning('"appId" will be deprecated in version 5.0.0. Use "clientId" instead.', {
        code: 'Nylas',
        type: 'DeprecationWarning'
      });
      return this.clientId;
    },
    set: function set(value) {
      this.clientId = value;
      process.emitWarning('"appId" will be deprecated in version 5.0.0. Use "clientId" instead.', {
        code: 'Nylas',
        type: 'DeprecationWarning'
      });
    }
  }, {
    key: "appSecret",
    get: function get() {
      process.emitWarning('"appSecret" will be deprecated in version 5.0.0. Use "clientSecret" instead.', {
        code: 'Nylas',
        type: 'DeprecationWarning'
      });
      return this.clientSecret;
    },
    set: function set(value) {
      this.clientSecret = value;
      process.emitWarning('"appSecret" will be deprecated in version 5.0.0. Use "clientSecret" instead.', {
        code: 'Nylas',
        type: 'DeprecationWarning'
      });
    }
  }]);

  return Nylas;
}();

Nylas.apiServer = 'https://api.nylas.com'; // We keep the old `module.exports` syntax for now to ensure that people using
// `require` don't have to use `.default` to use this package

module.exports = Nylas;